# 1절. 예외처리 필요성
- 예외가 날 가능성이 있는 부분에 대해서 미리 예상하고, 그에 대한 처리를 프로그래밍하는 것
    (필요한 이유: 좀 더 안정적인 시스템)
```
    ex. 파일을 다룰 때, 파일이 없거나, 쓰기금지, 파일 이코딩방법에 인한 오류
    ex. 데이터베이스 프로그래밍 시 제약조선 등에 의한 CRUD 명령 수행 오류. DBMS 서버 오류
    ex. 네트워크 프로그래밍 시 네트워트 연결 오류
    ex. 리스트나 튜플의 인덱스를 벗어난 참조에 의한 오류
# 2절 try~except로 예외처리
## 2.1 try~except
```
try:
    예외가 발생할 가능성이 있는 명영어들
excpet:
    예외가 발생했을 경우 실행할 명령어들

## 2.2 지정된 예외 처리
```
try:
    예외가 발생할 수도 있는 명령어
except 예외타입1:
    해당 예외가 발생할 경우 실행할 명령어
except 예외타입2:
    해당 예외가 발생할 경우 실행할 명령어
```
4절 추상클래스
추상클래스 : 추상메소드가 1개 이상 포함된 클래스를 추상클래스.
추상메소드 : 호출할 수 없는 메소드. 상속받은 클래스에서 재정의를 강요할 때
python에서 추상메소드는 @absteacmethod나 reise를 이용